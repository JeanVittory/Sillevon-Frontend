'use client';
import Head from 'next/head';
import { FC } from 'react';
import Footer from './Footer';
import HeaderNav from './Header';
import { useEffect, useState } from 'react';
import { MantineProvider, ColorSchemeProvider, ColorScheme } from '@mantine/core';
import { Provider } from 'react-redux';
import { store } from '../store';
import { ModalsProvider } from '@mantine/modals';
import { Notifications } from '@mantine/notifications';
import { Auth0Provider } from '@auth0/auth0-react';
import { fetchUserData } from '../lib/userdata';
import Cookies from 'js-cookie';

interface LayoutProps {
	children: React.ReactNode;
	title?: string;
}

const data = [
	{
		title: 'About',
		links: [
			{ label: 'Artists', link: '/artists' },
			{ label: 'Pricing', link: '/pricing' },
		],
	},
	{
		title: 'Project',
		links: [
			{ label: 'Contribute', link: '/' },
			{ label: 'Media', link: '/media' },
		],
	},
	{
		title: 'Community',
		links: [
			{ label: 'Join Discord', link: '/' },
			{ label: 'Follow on Twitter', link: '/' },
		],
	},
];

const Layout: FC<LayoutProps> = ({ children, title }) => {
	const [colorScheme, setColorScheme] = useState<ColorScheme>('light');
	const toggleColorScheme = (value?: ColorScheme) => {
		setColorScheme(value || (colorScheme === 'dark' ? 'light' : 'dark'));
	};

	useEffect(() => {
		const token = Cookies.get('sillusr');
		async function userdata() {
			if (token) {
				const res = await fetchUserData({
					headers: {
						Authorization: `Bearer ${token}`,
					},
				});
				const user = res.data;
				Cookies.remove('mode');
				Cookies.set('mode', user.mode, { expires: 1 });
				Cookies.set('name', user.name, { expires: 1 });
				Cookies.set('avatar', user.imagesDone.avatar, { expires: 1 });
				Cookies.set('background', user.imagesDone.background, { expires: 1 });
			} else {
				Cookies.remove('sillusr');
				Cookies.remove('mode');
				Cookies.remove('name');
				Cookies.remove('avatar');
				Cookies.remove('background');
			}
		}
		userdata();
	}, []);
	const [showChild, setShowChild] = useState(false);

	useEffect(() => {
		setShowChild(true);
	}, []);

	if (!showChild) {
		return null;
	}

	const WINDOW = typeof window !== 'undefined' ? window : null;
	const domain = process.env.NEXT_PUBLIC_AUTH0_DOMAIN as string;
	const clientId = process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID as string;

	return (
		<>
			<Head>
				<title>{title || 'Sillevon'}</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='author' content='Sillevon' />
				<link rel='icon' href='/sillevon.svg' />
			</Head>
			<main>
				<Provider store={store}>
					<ColorSchemeProvider colorScheme={colorScheme} toggleColorScheme={toggleColorScheme}>
						<MantineProvider withGlobalStyles withNormalizeCSS theme={{ colorScheme }}>
							<Auth0Provider
								domain={domain}
								clientId={clientId}
								authorizationParams={{ redirect_uri: WINDOW?.location.origin }}
							>
								<Notifications />
								<ModalsProvider>
									<HeaderNav />
									{children}
									<Footer data={data} />
								</ModalsProvider>
							</Auth0Provider>
						</MantineProvider>
					</ColorSchemeProvider>
				</Provider>
			</main>
		</>
	);
};

export default Layout;
